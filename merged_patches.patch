diff --git a/commerce_ingenico.info.yml b/commerce_ingenico.info.yml
index 6a3be3a..bfb508a 100644
--- a/commerce_ingenico.info.yml
+++ b/commerce_ingenico.info.yml
@@ -2,12 +2,6 @@ name: Commerce Ingenico
 type: module
 description: 'Provides Drupal Commerce integration with Ingenico payment services.'
 package: Commerce (contrib)
-# core: 8.x
+core: 8.x
 dependencies:
   - commerce_payment
-
-# Information added by Drupal.org packaging script on 2017-12-06
-version: '8.x-1.x-dev'
-core: '8.x'
-project: 'commerce_ingenico'
-datestamp: 1512574687
diff --git a/src/Plugin/Commerce/PaymentGateway/ConfigurationTrait.php b/src/Plugin/Commerce/PaymentGateway/ConfigurationTrait.php
index 80bb14d..a0db93f 100644
--- a/src/Plugin/Commerce/PaymentGateway/ConfigurationTrait.php
+++ b/src/Plugin/Commerce/PaymentGateway/ConfigurationTrait.php
@@ -18,9 +18,12 @@ trait ConfigurationTrait {
       'pspid' => '',
       'userid' => '',
       'password' => '',
+      'pm' => '',
+      'brand' => '',
       'sha_algorithm' => HashAlgorithm::HASH_SHA512,
       'sha_in' => '',
       'sha_out' => '',
+      'tp' => '',
       'language' => 'en_US',
       'api_logging' => [
         'request' => 'request',
@@ -69,6 +72,125 @@ trait ConfigurationTrait {
       '#required' => TRUE,
     ];
 
+    $form['pm'] = [
+      '#type' => 'select',
+      '#title' => $this->t('Payment method'),
+      '#multiple' => TRUE,
+      '#options' => [
+        'none' => $this->t('- none -'),
+        'CreditCard' => 'CreditCard',
+        'Bank transfer' => 'Bank transfer',
+        'Bank transfer BE' => 'Bank transfer BE',
+        'Bank transfer DE' => 'Bank transfer DE',
+        'Bank transfer FR' => 'Bank transfer FR',
+        'Bank transfer NL' => 'Bank transfer NL',
+        'Belfius Direct Net' => 'Belfius Direct Net',
+        'cashU' => 'cashU',
+        'CBC Online' => 'CBC Online',
+        'CENTEA Online' => 'CENTEA Online',
+        'Dexia Direct Net' => 'Dexia Direct Net',
+        'Direct Debits AT' => 'Direct Debits AT',
+        'Direct Debits DE' => 'Direct Debits DE',
+        'Direct Debits NL' => 'Direct Debits NL',
+        'DirectEbankingDE' => 'DirectEbankingDE',
+        'DirectEbankingAT' => 'DirectEbankingAT',
+        'DirectEbankingIT' => 'DirectEbankingIT',
+        'DirectEbankingBE' => 'DirectEbankingBE',
+        'DirectEbankingFR' => 'DirectEbankingFR',
+        'eDankort' => 'eDankort',
+        'EPS' => 'EPS',
+        'Fortis Pay Button' => 'Fortis Pay Button',
+        'giropay' => 'giropay',
+        'iDEAL' => 'iDEAL',
+        'ING HomePay' => 'ING HomePay',
+        'InterSolve' => 'InterSolve',
+        'KBC Online' => 'KBC Online',
+        'MiniTix' => 'MiniTix',
+        'MPASS' => 'MPASS',
+        'Payment on Delivery' => 'Payment on Delivery',
+        'PAYPAL' => 'PAYPAL',
+        'paysafecard' => 'paysafecard',
+        'PingPing' => 'PingPing',
+        'PostFinance Card' => 'PostFinance Card',
+        'PostFinance e-finance' => 'PostFinance e-finance',
+        'DirectEbanking' => 'DirectEbanking',
+        'TUNZ' => 'TUNZ',
+        'UNEUROCOM' => 'UNEUROCOM',
+        'Wallie' => 'Wallie',
+      ],
+      '#description' => $this->t('Here, you can specify a card brand that will send to Ingenico.'),
+      '#default_value' => $this->configuration['pm'],
+    ];
+
+    $form['brand'] = [
+      '#type' => 'select',
+      '#title' => $this->t('Payment method brand'),
+      '#multiple' => TRUE,
+      '#options' => [
+        'none' => $this->t('- none -'),
+        'Acceptgiro' => 'Acceptgiro',
+        'AIRPLUS' => 'AIRPLUS',
+        'American Express' => 'American Express',
+        'Aurora' => 'Aurora',
+        'Aurore' => 'Aurore',
+        'Bank transfer' => 'Bank transfer',
+        'Bank transfer BE' => 'Bank transfer BE',
+        'Bank transfer DE' => 'Bank transfer DE',
+        'Bank transfer FR' => 'Bank transfer FR',
+        'Bank transfer NL' => 'Bank transfer NL',
+        'BCMC' => 'BCMC',
+        'Belfius Direct Net' => 'Belfius Direct Net',
+        'Billy' => 'Billy',
+        'cashU' => 'cashU',
+        'CB' => 'CB',
+        'CBC Online' => 'CBC Online',
+        'CENTEA Online' => 'CENTEA Online',
+        'Cofinoga' => 'Cofinoga',
+        'Dankort' => 'Dankort',
+        'Dexia Direct Net' => 'Dexia Direct Net',
+        'Diners Club' => 'Diners Club',
+        'Direct Debits AT' => 'Direct Debits AT',
+        'Direct Debits DE' => 'Direct Debits DE',
+        'Direct Debits NL' => 'Direct Debits NL',
+        'DirectEbankingDE' => 'DirectEbankingDE',
+        'DirectEbankingAT' => 'DirectEbankingAT',
+        'DirectEbankingIT' => 'DirectEbankingIT',
+        'DirectEbankingBE' => 'DirectEbankingBE',
+        'DirectEbankingFR' => 'DirectEbankingFR',
+        'eDankort' => 'eDankort',
+        'EPS' => 'EPS',
+        'Fortis Pay Button' => 'Fortis Pay Button',
+        'giropay' => 'giropay',
+        'iDEAL' => 'iDEAL',
+        'ING HomePay' => 'ING HomePay',
+        'InterSolve' => 'InterSolve',
+        'JCB' => 'JCB',
+        'KBC Online' => 'KBC Online',
+        'Maestro' => 'Maestro',
+        'MaestroUK' => 'MaestroUK',
+        'MasterCard' => 'MasterCard',
+        'MiniTix' => 'MiniTix',
+        'MPASS' => 'MPASS',
+        'NetReserve' => 'NetReserve',
+        'Payment on Delivery' => 'Payment on Delivery',
+        'PAYPAL' => 'PAYPAL',
+        'paysafecard' => 'paysafecard',
+        'PingPing' => 'PingPing',
+        'PostFinance + card' => 'PostFinance + card',
+        'PostFinance e-finance' => 'PostFinance e-finance',
+        'PRIVILEGE' => 'PRIVILEGE',
+        'Sofort Uberweisung' => 'Sofort Uberweisung',
+        'Solo' => 'Solo',
+        'TUNZ' => 'TUNZ',
+        'UATP' => 'UATP',
+        'UNEUROCOM' => 'UNEUROCOM',
+        'VISA' => 'VISA',
+        'Wallie' => 'Wallie',
+      ],
+      '#description' => $this->t('Here, you can specify a card brand that will send to Ingenico.'),
+      '#default_value' => $this->configuration['brand'],
+    ];
+
     $form['sha_algorithm'] = [
       '#type' => 'select',
       '#title' => $this->t('SHA algorithm type'),
@@ -98,6 +220,13 @@ trait ConfigurationTrait {
       '#required' => TRUE,
     ];
 
+    $form['tp'] = [
+      '#type' => 'textfield',
+      '#title' => $this->t('Template URL'),
+      '#description' => $this->t('The name of the Template Page hosted on ingenico and containing the "payment string"'),
+      '#default_value' => $this->configuration['tp'],
+    ];
+
     $shaComposer = new AllParametersShaComposer(new Passphrase(''));
     $ecommercePaymentRequest = new EcommercePaymentRequest($shaComposer);
     $form['language'] = [
@@ -110,10 +239,10 @@ trait ConfigurationTrait {
     $form['api_logging'] = [
       '#type' => 'checkboxes',
       '#title' => $this->t('Log the following messages for debugging'),
-      '#options' => array(
+      '#options' => [
         'request' => $this->t('API request messages'),
         'response' => $this->t('API response messages'),
-      ),
+      ],
       '#default_value' => $this->configuration['api_logging'],
     ];
 
@@ -130,7 +259,8 @@ trait ConfigurationTrait {
       // if a cardholder authentication is requested. Therefore to be able to
       // use 3-D Secure, we need to have a e-Commerce payment gateway defined.
       // @see https://payment-services.ingenico.com/int/en/ogone/support/guides/integration%20guides/directlink-3-d
-      $gateways = $this->entityTypeManager->getStorage('commerce_payment_gateway')->loadByProperties(['plugin' => 'ingenico_ecommerce']);
+      $gateways = $this->entityTypeManager->getStorage('commerce_payment_gateway')
+        ->loadByProperties(['plugin' => 'ingenico_ecommerce']);
       $options = [];
       foreach ($gateways as $id => $gateway) {
         $options[$id] = $gateway->label();
@@ -154,7 +284,7 @@ trait ConfigurationTrait {
           '#default_value' => $this->configuration['3ds']['3d_secure_ecommerce_gateway'],
           '#states' => [
             'visible' => [
-              ':input[name="configuration[3ds][3d_secure]"]' => array('value' => 1),
+              ':input[name="configuration[3ds][3d_secure]"]' => ['value' => 1],
             ],
           ],
         ];
@@ -212,9 +342,16 @@ trait ConfigurationTrait {
       $this->configuration['pspid'] = $values['pspid'];
       $this->configuration['userid'] = $values['userid'];
       $this->configuration['password'] = $values['password'];
+      if($values['pm'] != 'none') {
+        $this->configuration['pm'] = $values['pm'];
+      }
+      if($values['brand'] != 'none') {
+        $this->configuration['brand'] = $values['brand'];
+      }
       $this->configuration['sha_algorithm'] = $values['sha_algorithm'];
       $this->configuration['sha_in'] = $values['sha_in'];
       $this->configuration['sha_out'] = $values['sha_out'];
+      $this->configuration['tp'] = $values['tp'];
       $this->configuration['language'] = $values['language'];
       $this->configuration['api_logging'] = $values['api_logging'];
       if (isset($values['3ds'])) {
diff --git a/src/PluginForm/ECommerceOffsiteForm.php b/src/PluginForm/ECommerceOffsiteForm.php
index fa56a58..88eaaba 100644
--- a/src/PluginForm/ECommerceOffsiteForm.php
+++ b/src/PluginForm/ECommerceOffsiteForm.php
@@ -48,6 +48,46 @@ class ECommerceOffsiteForm extends BasePaymentOffsiteForm {
     $ecommercePaymentRequest->setCurrency($payment->getAmount()->getCurrencyCode());
     $ecommercePaymentRequest->setLanguage($payment_gateway_configuration['language']);
 
+    $pm = $payment_gateway_configuration['pm'];
+    $brand = $payment_gateway_configuration['brand'];
+
+    if ($brand != null && is_array($brand)) {
+      $pmlist = '';
+      if(!isset($brand[1])) {
+        // Only one brand
+        $ecommercePaymentRequest->setBrand($brand[0]);
+      } else {
+        foreach ($brand as $key => $method) {
+          if ($method != 'none') {
+            if($key == 0) {
+              $pmlist = $method;
+            } else {
+              $pmlist .= ';' . $method;
+            }
+          }
+        }
+        $ecommercePaymentRequest->setPmlist($pmlist);
+      }
+    } else if ($pm != null && is_array($pm)) {
+      $pmlist = '';
+      foreach ($pm as $key => $method) {
+        if ($method != 'none') {
+          if ($key == 0) {
+            $pmlist = $method;
+          }
+          else {
+            $pmlist .= ';' . $method;
+          }
+        }
+      }
+      $ecommercePaymentRequest->setPmlist($pmlist);
+    }
+
+    // Set static template if not empty
+    if(!empty($payment_gateway_configuration['tp'])) {
+      $ecommercePaymentRequest->setTp($payment_gateway_configuration['tp']);
+    }
+
     // At the beginning PaymentProcess::buildPaneForm() did not pass the
     // selected transaction mode to the offsite payment form, but we still
     // want the default mode to be capture.
